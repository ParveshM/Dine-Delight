"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userDbRepository_1 = require("../../../app/interfaces/userDbRepository");
const authService_1 = require("../../services/authService");
const authServiceInterface_1 = require("../../../app/services-Interface/authServiceInterface");
const userController_1 = __importDefault(require("../../../adapters/userController"));
const authMiddleware_1 = __importDefault(require("../middlewares/authMiddleware"));
const restaurantRepositoryMongodb_1 = require("../../database/mongodb/repositories/restaurantRepositoryMongodb");
const restaurantDbRepository_1 = require("../../../app/interfaces/restaurantDbRepository");
const TableSlotdbRepository_1 = require("../../../app/interfaces/TableSlotdbRepository");
const TableSlotRepositoryMongodb_1 = require("../../database/mongodb/repositories/TableSlotRepositoryMongodb");
const bookingController_1 = __importDefault(require("../../../adapters/bookingController"));
const reservationService_1 = require("../../services/reservationService");
const reservationServiceInterface_1 = require("../../../app/services-Interface/reservationServiceInterface");
const bookingDbRepository_1 = require("../../../app/interfaces/bookingDbRepository");
const BookingRepositoryMongodb_1 = require("../../database/mongodb/repositories/BookingRepositoryMongodb");
const tableDbRepository_1 = require("../../../app/interfaces/tableDbRepository");
const tableRepositoryMongoDb_1 = require("../../database/mongodb/repositories/tableRepositoryMongoDb");
const menuController_1 = __importDefault(require("../../../adapters/menuController"));
const menuDbRepository_1 = require("../../../app/interfaces/menuDbRepository");
const MenuRepositoryMongodb_1 = require("../../database/mongodb/repositories/MenuRepositoryMongodb");
const userRepositoryMongodb_1 = require("../../database/mongodb/repositories/userRepositoryMongodb");
const AdminDbRepository_1 = __importDefault(require("../../../app/interfaces/AdminDbRepository"));
const AdminRepositoryMongodb_1 = require("../../database/mongodb/repositories/AdminRepositoryMongodb");
const OrderRepositoryMongodb_1 = __importDefault(require("../../database/mongodb/repositories/OrderRepositoryMongodb"));
const OrderDbRepository_1 = __importDefault(require("../../../app/interfaces/OrderDbRepository"));
const userRoute = () => {
    const router = express_1.default.Router();
    const controller = (0, userController_1.default)(authServiceInterface_1.authServiceInterface, authService_1.authService, userDbRepository_1.userDbRepository, userRepositoryMongodb_1.userRepositoryMongodb, restaurantDbRepository_1.restaurantDbRepository, restaurantRepositoryMongodb_1.restaurantRepositoryMongodb, TableSlotdbRepository_1.TableSlotDbRepository, TableSlotRepositoryMongodb_1.TableSlotRepositoryMongodb, tableDbRepository_1.tableDbRepository, tableRepositoryMongoDb_1.tableRepositoryMongodb, AdminDbRepository_1.default, AdminRepositoryMongodb_1.adminRepositoryMongodb, OrderDbRepository_1.default, OrderRepositoryMongodb_1.default);
    const _bookingController = (0, bookingController_1.default)(reservationServiceInterface_1.reservationServiceInterface, reservationService_1.reservationService, bookingDbRepository_1.bookingDbRepository, BookingRepositoryMongodb_1.bookingRepositoryMongodb, restaurantDbRepository_1.restaurantDbRepository, restaurantRepositoryMongodb_1.restaurantRepositoryMongodb, tableDbRepository_1.tableDbRepository, tableRepositoryMongoDb_1.tableRepositoryMongodb, userDbRepository_1.userDbRepository, userRepositoryMongodb_1.userRepositoryMongodb, TableSlotdbRepository_1.TableSlotDbRepository, TableSlotRepositoryMongodb_1.TableSlotRepositoryMongodb);
    const _menuController = (0, menuController_1.default)(menuDbRepository_1.menuDbRepository, MenuRepositoryMongodb_1.MenuRepositoryMongodb, bookingDbRepository_1.bookingDbRepository, BookingRepositoryMongodb_1.bookingRepositoryMongodb, userDbRepository_1.userDbRepository, userRepositoryMongodb_1.userRepositoryMongodb);
    /******** user authentication Routes ********/
    router.post("/signup", controller.registerUser);
    router.post("/verify_otp", controller.verifyOtp);
    router.post("/resend_otp", controller.resendOtp);
    router.post("/login", controller.userLogin);
    router.post("/google_signIn", controller.googleSignIn); // google sign in
    router.post("/forgot_password", controller.forgotPassword);
    router.post("/reset_password/:token", controller.resetPassword);
    router.post("/email/unSubscribe", controller.updateEmailPreference);
    router.get("/users/:id", controller.userInfo);
    router.get("/profile", authMiddleware_1.default, controller.userProfile);
    router.patch("/profile/edit", authMiddleware_1.default, controller.updateUserInfo);
    router.get("/transactions", authMiddleware_1.default, controller.getTransactions);
    router.get("/restaurants", controller.getRestaurants);
    router.get("/restaurants/:restaurantID", controller.getSingleRestaurant);
    router.get("/tables/:tableID", controller.tableDetails);
    router.post("/review/add", authMiddleware_1.default, controller.createNewRating);
    router.patch("/bookmarks", authMiddleware_1.default, controller.updateBookmarks);
    /****************Booking Routes ********************/
    router.get("/bookings", authMiddleware_1.default, _bookingController.getAllbookings);
    router.get("/bookings/:bookingID", authMiddleware_1.default, _bookingController.getBookingDetails);
    router.post("/reserve_table", authMiddleware_1.default, _bookingController.reserveTable);
    router.patch("/payment/status/:id", authMiddleware_1.default, _bookingController.updatePaymentStatus);
    router.patch("/booking/cancel/:bookingID", authMiddleware_1.default, _bookingController.cancelBooking);
    router.post("/booking/preOrder", authMiddleware_1.default, _bookingController.updatePreOrderedFood);
    router.delete("/booking/preOrder", authMiddleware_1.default, _bookingController.deletePreOrderedFood);
    router.get("/banners", controller.getBanners);
    router.get("/menu", authMiddleware_1.default, _menuController.getMenu);
    router.post("/order", authMiddleware_1.default, controller.newFoodOrder);
    router.get("/orders", authMiddleware_1.default, controller.orders);
    router.put("/orders/update", authMiddleware_1.default, controller.updateOrder);
    return router;
};
exports.default = userRoute;
